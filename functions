# mixed alphabet substitution dictionary
sub = {
  # letters
  'a':'o', 'b':'f', 'c':'e',
  'd':'q', 'e':'w', 'f':'s',
  'g':'d', 'h':'h', 'i':'r',
  'j':'u', 'k':'b', 'l':'k',
  'm':'m', 'n':'v', 'o':'y',
  'p':'l', 'q':'i', 'r':'x',
  's':'z', 't':'t', 'u':'n',
  'v':'p', 'w':'a', 'x':'c',
  'y':'j', 'z':'g',
  # digits
  '1':'1', '2':'2', '3':'3',
  '4':'4', '5':'5', '6':'6',
  '7':'7', '8':'8', '9':'9',
  # punctuation
  ' ':' ', ',':',', '.':'.',
  '"':'"',  "'":"'",'-':'-',
  '?':'?', '!':'!', ';':';',
  ':':':', '(':'(', ')':')',
  '’':'’', '—':'—', '“':'“',
  '”':'”',
}

def rotate_alpha_key(letter, key, direction):
  if letter.islower():
    shift = ord(key) - ord('a')
    if direction == '+':
      new = ord(letter) + shift
    else:
      new = ord(letter) - shift
    if new > ord('z'):
      new = new - 26
    elif new < ord('a'):
      new = new + 26
    new = chr(new)
  else:
    new = letter
  return new

def rotate_number_key(letter, key):
  if letter.islower():
    new = ord(letter) + key
    if new > ord('z'):
      new = new - 26
    elif new < ord('a'):
      new = new + 26
    new = chr(new)
  else:
    new = letter
  return new

def xor(character, key):
  code = ord(character) ^ ord(key)
  result = chr(code)
  return result

def get_file_contents(filename):
  with open(filename, 'r') as f:
   contents = f.read().strip()
  return contents
